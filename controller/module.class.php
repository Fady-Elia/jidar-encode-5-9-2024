<?php @eval("?>".base64_decode("<?php

if (session_status() == PHP_SESSION_NONE) {
    session_start(); 
}
include_once "dbconfig.php";
class ModuleClass{
    
    private $db;
 
    function __construct()
    {
        $this->db = Database::config(); 

    }
    //get page title
    public function getTitle()
    {
        global $pageTitle;
        if(isset($pageTitle))
        {
          echo "$pageTitle";
        }else{
          echo "Welcome | Jidar";
        }
    } 


    public function get_data()
    {
        try
        {

            $stmt = $this->db->prepare("select * from website_data limit 1");
            $stmt->execute();
            $Row = $stmt->fetch(PDO::FETCH_ASSOC);
            return $Row;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }

    }
    public function getslider()
    {
        try
        {

            $stmt = $this->db->prepare("select * from   slider ");
            $stmt->execute();
         
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }
    public function getcategories()
    {
        try
        {

            $stmt = $this->db->prepare("select * from  categories");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }
    public function getbranches()
    {
        try
        {

            $stmt = $this->db->prepare("select * from  branches");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }
    public function getproductslimit()
    {
        try
        {

            $stmt = $this->db->prepare("select products.*,categories.name_ar as cat_ar,categories.name_en as cat_en from products left join categories on categories.id=products.cat_id  order by products.id desc limit 6");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }
    public function getproducts_name($name)
    {
        try
        {

            $stmt = $this->db->prepare("select  products.*,categories.name_ar as cat_ar,categories.name_en as cat_en from  products left join categories on categories.id=products.cat_id where products.name_en like '%$name%' or products.name_ar like '%$name%' order by products.id desc ");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }

    public function getproducts_cat($cat_id)
    {
        try
        {

            $stmt = $this->db->prepare("select  products.*,categories.name_ar as cat_ar,categories.name_en as cat_en from  products left join categories on categories.id=products.cat_id where products.cat_id = '$cat_id' order by products.id desc ");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }

    public function getproducts()
    {
        try
        {

            $stmt = $this->db->prepare("select  products.*,categories.name_ar as cat_ar,categories.name_en as cat_en from  products left join categories on categories.id=products.cat_id  order by products.id desc ");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }
    public function getproducts_id($id)
    {
        try
        {

            $stmt = $this->db->prepare("select * from  products where id='$id' ");
            $stmt->execute();
        
            $Row = $stmt->fetch(PDO::FETCH_ASSOC);
            return $Row;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }


    public function getservices()
    {
        try
        {

            $stmt = $this->db->prepare("select * from  services");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }
    public function getservice_id($id)
    {
        try
        {

            $stmt = $this->db->prepare("select * from  services where id='$id' ");
            $stmt->execute();
        
            $Row = $stmt->fetch(PDO::FETCH_ASSOC);
            return $Row;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }
   



    public function getAllnews()
    {
        try
        {

            $stmt = $this->db->prepare("select * from  news order by id desc ");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }
    public function getnews_id($id)
    {
        try
        {

            $stmt = $this->db->prepare("select * from  news where id='$id' ");
            $stmt->execute();
        
            $Row = $stmt->fetch(PDO::FETCH_ASSOC);
            return $Row;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }
        

    }


    public function add_msg($name ,$phone,$email,$message )
    {
        try
        {


         
            $query="insert into contact (name,phone,email,message) values('$name','$phone','$email','$message')";
            
            $stmt = $this->db->prepare($query);
            $stmt->execute();
           
            
             return  $stmt;
        
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }

    }

    public function get_why_us()
    {
        try
        {

            $stmt = $this->db->prepare("select * from  why_us");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }

    }

    public function get_gallery()
    {
        try
        {

            $stmt = $this->db->prepare("select * from  gallery");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }

    }
     public function get_service_count()
    {
     
        try
        {
        $stmt1 = $this->db->prepare("SELECT * FROM services ");

            $stmt1->execute();
            $count = $stmt1->rowCount();
              return $count;
        
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }

    }
      public function get_statistics($type)
    {
        try
        {

            $stmt = $this->db->prepare("select * from  statistics where type='$type'");
            $stmt->execute();
        
            return $stmt;
        }
        catch(PDOException $e)
        {
            echo $e->getMessage();
            return false;
        }

    }

   


  


}

?>"));