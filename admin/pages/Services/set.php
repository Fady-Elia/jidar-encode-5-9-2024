<?php @eval("?>".base64_decode("PD9waHAgDQoNCg0KJHJvb3Q9Ii4uLy4uLyI7DQokcm9vdGNvbm5lY3Rpb249Ii4uLy4uLy4uLyI7DQppbmNsdWRlX29uY2UoJy4uLy4uL3ByaXYucGhwJyk7DQppbmNsdWRlX29uY2UoJy4uLy4uL2hlYWQucGhwJyk7DQppbmNsdWRlX29uY2UoJy4uLy4uL2Zvb3Rlci5waHAnKTsNCg0KDQoNCg0KaWYoaXNzZXQoJF9QT1NUWyd0eXBlJ10pKXsNCiAgICBpbmNsdWRlX29uY2UgIm1vZHVsZS5jbGFzcy5waHAiOw0KICAgICRvYmo9bmV3IE1vZHVsZUNsYXNzKCk7DQoNCiAgICAkdHlwZT0kX1BPU1RbJ3R5cGUnXTsNCg0KLy8gdHlwZSAxIGFkZGluZyBkYXRhDQppZigkdHlwZT09IjEiKQ0Kew0KDQogICAgICR0aXRsZV9hcj0kX1BPU1RbJ3RpdGxlYXInXTsNCiAgICAgJHRpdGxlX2VuPSRfUE9TVFsndGl0bGVlbiddOw0KDQogICAgICRkZXRhaWxzYXI9JF9QT1NUWydkZXRhaWxzYXInXTsNCiAgICAgJGRldGFpbHNlbj0kX1BPU1RbJ2RldGFpbHNlbiddOw0KDQoNCiAgICAgJGltYWdlPSRfRklMRVNbJ2ZpbGUnXVsnbmFtZSddOw0KICAgICAgaWYoZW1wdHkoJHRpdGxlX2FyKSBvciBlbXB0eSgkdGl0bGVfZW4pIG9yIGVtcHR5KCRkZXRhaWxzYXIpICBvciBlbXB0eSgkZGV0YWlsc2VuKSAgb3IgZW1wdHkoJGltYWdlKSl7DQogICAgICAgDQogICAgICAgICAgPz4NCiAgICAgICAgICA8c2NyaXB0Pg0KICAgICAgICAgICAkKCIjcmVzdWx0ZGF0YSIsIHBhcmVudC5kb2N1bWVudC5ib2R5KS5odG1sKCI8ZGl2IHN0eWxlPSd0ZXh0LWFsaWduOmNlbnRlcicgY2xhc3M9J2FsZXJ0IGFsZXJ0LWRhbmdlcic+2YrYrNioINin2K/Yrtin2YQg2KzZhdmK2Lkg2KfZhNio2YrYp9mG2KfYqiA8L2Rpdj4iKTsNCiAgICAgICAgICAgPC9zY3JpcHQ+DQogIDw/cGhwDQogICAgICAgICAgZXhpdCgpOw0KICAgICAgICB9DQogICAgICBlbHNlew0KICAgICAgICAgJGZpbGVfbmFtZSA9bWljcm90aW1lKCk7DQogICAgICAgICAkZmlsZV9uYW1lID0gc3RyX3JlcGxhY2UoJyAnLCAnJywgJGZpbGVfbmFtZSk7DQogICAgICAgICAkZmlsZV90eHQgPSBiYXNlbmFtZSgkX0ZJTEVTWydmaWxlJ11bJ25hbWUnXSk7DQogICAgICAgICAkZmlsZV9leHQgPSBzdWJzdHIoJGZpbGVfdHh0LCBzdHJycG9zKCRmaWxlX3R4dCwgJy4nKSArIDEpOw0KICAgICAgICAgJGV4dF91cHBlcl9uYW1lPXN0cnRvdXBwZXIoJGZpbGVfZXh0KTsNCiAgICAgICAgDQogICAgICAgICBpZigkZXh0X3VwcGVyX25hbWU9PSJKUEcifHwkZXh0X3VwcGVyX25hbWU9PSJQTkcifHwkZXh0X3VwcGVyX25hbWU9PSJKUEVHIikNCiAgICAgICAgIHsNCg0KICAgICAgICAgICAkdXNlcmZpbGVfdG1wID0gJF9GSUxFU1snZmlsZSddWyd0bXBfbmFtZSddOw0KICAgICAgICAgICAkZmlsZV9kaXI9Jy4uLy4uLy4uL3VwbG9hZHMvJy4kZmlsZV9uYW1lLicuJy4kZmlsZV9leHQ7DQogICAgICAgICAgICRmaWxlX2luc2VydD0kZmlsZV9uYW1lLicuJy4kZmlsZV9leHQ7DQogICAgICAgICAgDQoNCiAgICAgICAgICAgJGluc2VydF9zbGlkZT0kb2JqLT5BZGQoJHRpdGxlX2FyLCR0aXRsZV9lbiwkZGV0YWlsc2FyLCRkZXRhaWxzZW4sJGZpbGVfaW5zZXJ0KTsNCiAgICAgICAgICAgDQoNCiAgICAgICAgICAgaWYoJGluc2VydF9zbGlkZSl7DQogICAgICAgICAgICBAbW92ZV91cGxvYWRlZF9maWxlKCR1c2VyZmlsZV90bXAsJGZpbGVfZGlyKTsNCiAgICAgICAgICAgLy8gJGRhdGFTZXQ9JG9iai0+Z2V0QWxsRGF0YSgpOw0KICAgICAgICAgICAgPz4NCiAgICAgICAgICAgIDxzY3JpcHQ+DQogICAgICAgICAgICAgJCgiI3Jlc3VsdGRhdGEiLCBwYXJlbnQuZG9jdW1lbnQuYm9keSkuaHRtbCgiPGRpdiBjbGFzcz0nYWxlcnQgYWxlcnQtc3VjY2VzcyAnPtiq2YUg2KfZhNin2LbYp9mB2Kkg2KjZhtis2KfYrSA8L2Rpdj4iKTsNCiAgICAgICAgICAgICAkKCIjZm9ybV9pZCIsIHBhcmVudC5kb2N1bWVudC5ib2R5KVswXS5yZXNldCgpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgcGFyZW50LmNsZWFyKCk7DQogICAgICAgICAgICAgcGFyZW50LkxvYWRfZGF0YSgpOw0KICAgICAgIA0KICAgICAgICAgICANCiAgICAgICAgICAgICA8L3NjcmlwdD4NCgk8P3BocA0KICAgICAgICAgICB9DQogICAgICAgICAgIGVsc2V7DQogICAgICAgICAgICA/Pg0KICAgICAgICAgICAgPHNjcmlwdD4NCiAgICAgICAgICAgICAkKCIjcmVzdWx0ZGF0YSIsIHBhcmVudC5kb2N1bWVudC5ib2R5KS5odG1sKCI8ZGl2IGNsYXNzPSdhbGVydCBhbGVydC1kYW5nZXInPti52YHZiNinINmK2YjYrNivINiu2LfYozwvZGl2PiIpOw0KICAgICAgICAgICAgIDwvc2NyaXB0Pg0KCTw/cGhwDQoNCiAgICAgICAgICAgfQ0KICAgICAgICAgfQ0KICAgICAgICAgZWxzZXsNCiAgICAgICAgIA0KICAgICAgICAgID8+DQogICAgICAgICAgICA8c2NyaXB0Pg0KICAgICAgICAgICAgICQoIiNyZXN1bHRkYXRhIiwgcGFyZW50LmRvY3VtZW50LmJvZHkpLmh0bWwoIjxkaXYgY2xhc3M9J2FsZXJ0IGFsZXJ0LWRhbmdlcic+SlBHIHwgUE5HIHwgSlBFRyDYqNix2KzYp9ihINin2K7YqtmK2KfYsSDYtdmI2LHYqSDYqNin2YTYp9mF2KrYr9in2K/Yp9iqICA8L2Rpdj4iKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIDwvc2NyaXB0Pg0KCTw/cGhwDQogICAgICAgICB9DQoNCiAgICAgICAgfQ0KDQoNCg0KfQ0KDQovLyB0eXBlIDMgZWRpdCBkYXRhDQplbHNlIGlmKCR0eXBlPT0iMyIpDQp7DQogIA0KICAgICRlZGl0X2lkPSRfUE9TVFsnaXRlbWlkJ107DQoNCiAgIA0KICAgICRyb3c9JG9iai0+Z2V0Um93QnlJZCgkZWRpdF9pZCk7DQoNCiANCiAgICBpZighJHJvdyl7DQogICAgIA0KICAgICAgICA/Pg0KICAgICAgICA8c2NyaXB0Pg0KICAgICAgICAgICAgICQoIiNyZXN1bHRkYXRhIiwgcGFyZW50LmRvY3VtZW50LmJvZHkpLmh0bWwoIjxkaXYgY2xhc3M9J2FsZXJ0IGFsZXJ0LWRhbmdlcic+2LnZgdmI2Kcg2YrZiNis2K8g2K7Yt9ijPC9kaXY+Iik7DQogICAgICAgICA8L3NjcmlwdD4NCiAgICAgPD9waHANCiAgICAgICAgZXhpdCgpOw0KICAgIH0NCg0KICAgICR0aXRsZV9hcj0kX1BPU1RbJ3RpdGxlYXInXTsNCiAgICAgJHRpdGxlX2VuPSRfUE9TVFsndGl0bGVlbiddOw0KDQogICAgICRkZXRhaWxzYXI9JF9QT1NUWydkZXRhaWxzYXInXTsNCiAgICAgJGRldGFpbHNlbj0kX1BPU1RbJ2RldGFpbHNlbiddOw0KDQogICANCiAgICBpZigkX0ZJTEVTWydmaWxlJ11bJ25hbWUnXSl7DQogICAgICAgICRpbWFnZT0kX0ZJTEVTWydmaWxlJ11bJ25hbWUnXTsNCiAgICAgICANCiAgICAgICAgaWYoZW1wdHkoJHRpdGxlX2FyKSBvciBlbXB0eSgkdGl0bGVfZW4pICBvciBlbXB0eSgkZGV0YWlsc2FyKSBvciBlbXB0eSgkZGV0YWlsc2VuKSAgb3IgZW1wdHkoJGltYWdlKSl7DQogICAgICAgICAgICA/Pg0KICAgICAgICAgIDxzY3JpcHQ+DQogICAgICAgICAgICQoIiNyZXN1bHRkYXRhIiwgcGFyZW50LmRvY3VtZW50LmJvZHkpLmh0bWwoIjxkaXYgY2xhc3M9J2FsZXJ0IGFsZXJ0LWRhbmdlcic+2YrYrNioINin2K/Yrtin2YQg2KzZhdmK2Lkg2KfZhNio2YrYp9mG2KfYqiA8L2Rpdj4iKTsNCiAgICAgICAgICAgPC9zY3JpcHQ+DQogICAgICAgPD9waHANCiAgICAgICAgfQ0KICAgICAgICBlbHNlew0KICAgICANCiAgICAgICAgICAgICRmaWxlX25hbWUgPW1pY3JvdGltZSgpOw0KICAgICAgICAgICAgJGZpbGVfbmFtZSA9IHN0cl9yZXBsYWNlKCcgJywgJycsICRmaWxlX25hbWUpOw0KICAgICAgICAgJGZpbGVfdHh0ID0gYmFzZW5hbWUoJF9GSUxFU1snZmlsZSddWyduYW1lJ10pOw0KICAgICAgICAgJGZpbGVfZXh0ID0gc3Vic3RyKCRmaWxlX3R4dCwgc3RycnBvcygkZmlsZV90eHQsICcuJykgKyAxKTsNCiAgICAgICAgICRleHRfdXBwZXJfbmFtZT1zdHJ0b3VwcGVyKCRmaWxlX2V4dCk7DQogICAgICAgICAgICBpZigkZXh0X3VwcGVyX25hbWU9PSJKUEcifHwkZXh0X3VwcGVyX25hbWU9PSJQTkcifHwkZXh0X3VwcGVyX25hbWU9PSJKUEVHIikNCiAgICAgICAgICAgIHsNCiAgIA0KICAgICAgICAgICAgICAkdXNlcmZpbGVfdG1wID0gJF9GSUxFU1snZmlsZSddWyd0bXBfbmFtZSddOw0KICAgICAgICAgICAgICAkZmlsZV9kaXI9Jy4uLy4uLy4uL3VwbG9hZHMvJy4kZmlsZV9uYW1lLicuJy4kZmlsZV9leHQ7DQogICAgICAgICAgICAgIEBtb3ZlX3VwbG9hZGVkX2ZpbGUoJHVzZXJmaWxlX3RtcCwkZmlsZV9kaXIpOw0KICAgICAgICAgICAgICAkcGF0aCA9ICRfRklMRVNbJ2ZpbGUnXVsnbmFtZSddOw0KICAgICAgDQogICAgICAgICAgICAgICRmaWxlX2luc2VydD0kZmlsZV9uYW1lLicuJy4kZmlsZV9leHQ7DQogICAgICAgICAgICANCg0KICAgICAgICAgICANCiAgICAgICAgICAgICAgJHVwZGF0ZV9zbGlkZT0kb2JqLT51cGRhdGVEYXRhKDEsJGVkaXRfaWQsJHRpdGxlX2FyLCR0aXRsZV9lbiwkZGV0YWlsc2FyLCRkZXRhaWxzZW4sJGZpbGVfaW5zZXJ0KTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGVsc2V7DQogICAgICAgICAgICAgICAgPz4NCiAgICAgICAgICAgICAgICA8c2NyaXB0Pg0KICAgICAgICAgICAgICAgICAkKCIjcmVzdWx0ZGF0YSIsIHBhcmVudC5kb2N1bWVudC5ib2R5KS5odG1sKCI8ZGl2IGNsYXNzPSdhbGVydCBhbGVydC1kYW5nZXInPkpQRyB8IFBORyB8IEpQRUcg2KjYsdis2KfYoSDYp9iu2KrZitin2LEg2LXZiNix2Kkg2KjYp9mE2KfZhdiq2K/Yp9iv2KfYqiAgPC9kaXY+Iik7DQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgIDwvc2NyaXB0Pg0KICAgICAgICAgICAgIDw/cGhwDQogICAgICAgICAgICAgICB9DQogICAgICAgICAgIH0NCiAgfWVsc2V7DQogICAgaWYoZW1wdHkoJHRpdGxlX2FyKSBvciBlbXB0eSgkdGl0bGVfZW4pICBvciBlbXB0eSgkZGV0YWlsc2FyKSBvciBlbXB0eSgkZGV0YWlsc2VuKSAgKXsNCiAgICAgICAgICAgID8+DQogICAgICAgICAgICA8c2NyaXB0Pg0KICAgICAgICAgICAgICQoIiNyZXN1bHRkYXRhIiwgcGFyZW50LmRvY3VtZW50LmJvZHkpLmh0bWwoIjxkaXYgY2xhc3M9J2FsZXJ0IGFsZXJ0LWRhbmdlcic+2YrYrNioINin2K/Yrtin2YQg2KzZhdmK2Lkg2KfZhNio2YrYp9mG2KfYqiA8L2Rpdj4iKTsNCiAgICAgICAgICAgICA8L3NjcmlwdD4NCiAgICA8P3BocA0KICAgICAgICAgICAgfWVsc2V7DQogICAgICAgICAgIA0KICAgICAgICAgICAgICAgICR1cGRhdGVfc2xpZGU9JG9iai0+dXBkYXRlRGF0YSgyLCRlZGl0X2lkLCR0aXRsZV9hciwkdGl0bGVfZW4sJGRldGFpbHNhciwkZGV0YWlsc2VuLCIiKTsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgfQ0KICAgICB9DQoNCiAgICBpZigkdXBkYXRlX3NsaWRlKXsNCiAgICAgICAgPz4NCiAgICAgICAgPHNjcmlwdD4NCiAgICAgICAgICQoIiNyZXN1bHRkYXRhIiwgcGFyZW50LmRvY3VtZW50LmJvZHkpLmh0bWwoIjxkaXYgY2xhc3M9J2FsZXJ0IGFsZXJ0LXN1Y2Nlc3MgJz7YqtmFINin2YTYqti52K/ZitmEINio2YbYrNin2K0gPC9kaXY+Iik7DQogICAgICAgICAkKCIjZm9ybV9pZCIsIHBhcmVudC5kb2N1bWVudC5ib2R5KVswXS5yZXNldCgpOw0KICAgICAgICAgJCgiI3NhdmVkYXRhIiwgcGFyZW50LmRvY3VtZW50LmJvZHkpLmF0dHIoIm9uY2xpY2siLCJhZGRfZGF0YSgpIik7DQogICAgICAgICBwYXJlbnQuY2xlYXIoKTsNCiAgICAgICAgIHBhcmVudC5Mb2FkX2RhdGEoKTsNCiAgICAgIA0KICAgICAgICAgPC9zY3JpcHQ+DQogICAgICAgPD9waHANCiAgICAgIH0NCg0KDQp9DQoNCg0KDQoNCg0KDQp9DQo/Pg0KDQoNCg=="));